# Set up for Zsh aliases
alias python="python3"

pclip()
{
    if [ -z "$1" ]; then
        echo "Fast paste full path into system clipboard"
        echo "Usage: pclip [directory/file]"
        return
    fi
    fullp=$(printf '%q' $(realpath $1 | tr -d '\n'))
    echo -n $fullp | xclip -selection c
    echo "clip path: $fullp"
}

pwsl()
{
    if [ -z "$1" ]; then
        echo "Fast paste full path into system clipboard"
        echo "Usage: pwsl [directory/file]"
        return
    fi
    fullp=$(printf '%q' $(realpath $1 | xargs wslpath -w | tr -d '\n'))
    echo -n $fullp | xclip -selection c
    echo "clip path: $fullp"
}

nth() {
    input=$(cat)
    if [[ ! "$1" =~ ^-?[0-9]+$ ]]; then
        echo "Usage: <output> | nth number"
        return
    fi
    
    if [[ ${1:0:1} == "-" ]]; then
        number=${1:1}
        echo $input | tail -$number | head -1
    else
        echo $input | head -$1 | tail -1
    fi
}

# jump up to the directory with given name
# if the folder with name not found, stay at pwd
ju()
{
    if [ -z "$1" ]; then
        echo "Usage: upto [directory]"
        return
    fi
    local upto=$1
    cd "${PWD/\/$upto\/*//$upto}"
}


# jump down to the directory with given name
# if the folder with name not found, stay at pwd
jd(){
    if [ -z "$1" ]; then
        echo "Usage: jd [directory]";
        return 1
    else
        dir=$(find . -type d -name $1 -print -quit)
        if [ -z $dir ]; then
            return 0
        else
            cd $dir
        fi
    fi
}

# count number of file under folder
countf(){
    if [[ -z "$1" ]]; then
        find . -type f | wc -l
    else
        find $1 -type f | wc -l
    fi
}

# batch rename files (unlike built-in 'rename', it supports chinese characters)
rename_chinese(){
    if [[ -z "$1" ]] || [[ -z "$2" ]]; then
        echo "rename_chinese: Rename file recursively, usage:"
        echo "  rename_chinese [name] [new name]"
        return 1
    else
        find . -name "$1" | while read l; do mv $l $(dirname $l)/$2; done;
    fi
}

# display argument helps
args() {
    echo "
    !^      first argument\n\
    !$      last argument\n\
    !*      all arguments\n\
\n\
    !-n     n-th command before the current\n\
    !-n:m   m-th argument of n-th command before the current\n\
    !!      repeat the previous line (is same as !-1)\n\
\n\
    !:2     2nd argument of last command\n\
    !:2-3   2nd to third arguments of last command\n\
    !:2-$   2nd to last arguments of last command\n\
    !:2*    2nd to last arguments of last command\n\
    !:2-    2nd to next to last arguments of last command\n\
    !-2:2   2nd argument of 2nd last command"
}

ssh-add-if-not-exist() {
    if [[ -z "$1" ]]; then
        echo "ssh-add-if-not-exist: Add a ssh key if it does not list in ssh-agnet"
        echo "Usage: ssh-add-if-not-exist path-to-private-key"
    fi

    _check_agent () {
        ssh-add -l &>/dev/null
        if [[ $? -ne 0 ]]; then eval $(ssh-agent) && echo "Add new ssh-agent"; fi
    }
    _check_agent
    unset -f _check_agent

    ssh-add -l | grep -q "$(ssh-keygen -lf $1  | awk '{print $2}')" || ssh-add $1
}

# display random mottos
GG(){
    m1="When in doubt, use brute force. -- Ken Thompson"
    m2="Deleted code is debugged code.  -- Ken Thompson"
    m3="You can’t trust code that you did not totally create yourself. -- Ken Thompson"
    m4="Controlling complexity is the essence of computer programming. -- Brian Kernighan"
    m5="Life is too short to run proprietary software. -- Bdale Garbee"
    m6="Simplicity is prerequisite for reliability.  -- Edsger W. Dijkstra"
    m7="If you think your users are idiots, only idiots will use it. -- Linus"
    m8="First, solve the problem. Then, write the code. -- John Johnson"
    m9="Things which any idiot could write usually have the quality of having been written by an idiot.  -- Bram Cohen"
    m10="The trick is to fix the problem you have, rather than the problem you want. -- Bram Cohen"
    m11="When in doubt, leave it out.  -- Joshua BLoch"
    m12="software sucks because users demand it to. -- Nathan Myhrvold"
    m13="To me, legacy code is simply code without tests. ― Michael C. Feathers"
    m14="Code without tests is bad code. It doesn't matter how well written it is; it doesn't matter how pretty or object-oriented or well-encapsulated it is. -- Michael C. Feathers"

    mottos=($m1 $m2 $m3 $m4 $m5 $m6 $m7 $m8 $m9 $m10 $m11 $m12 $m13 $m14)
    size=$((${#mottos[*]} - 1))
    index=$(($RANDOM % $size + 1))
    echo ${mottos[$index]}
}
